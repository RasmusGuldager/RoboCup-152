#!/usr/bin/env pybricks-micropython
from pybricks.hubs import EV3Brick
from pybricks.ev3devices import (Motor, TouchSensor, ColorSensor,
                                 InfraredSensor, UltrasonicSensor, GyroSensor)
from pybricks.parameters import Port, Stop, Direction, Button, Color
from pybricks.tools import wait, StopWatch, DataLog
from pybricks.robotics import DriveBase
from pybricks.media.ev3dev import SoundFile, ImageFile


# Initialize the EV3 Brick.
ev3 = EV3Brick()

# Initialize the motors.
left_motor = Motor(Port.A)
right_motor = Motor(Port.B)

# Initialize the drive base.
robot = DriveBase(left_motor, right_motor, wheel_diameter=55.5, axle_track=124)

# Afstandssensor og farvesensor
Afstandssensor = UltrasonicSensor(Port.S4)
Farvesensor = ColorSensor(Port.S3)

def checkColor():
    return Farvesensor.reflection()

def checkDist():
    return Afstandssensor.distance()


watch = StopWatch() #definer et stopur
prevColor = checkColor() #en cached farveværdi, så de kan sammenlignes

timeCascade = [0,500,1000] #Hvornår i milisekunder går vi ned i cascade?

primaryMoverCascadeSpeed = [-300, -200, -100] #Værdier til kaskaderne
secondaryMoverCascadeSpeed = [-200, -100, 0] #Værdier til kaskaderne

watch.resume() #start uret
cascadeItarator = 0 #Sæt en iterator

def TurnRight():
    cascadeIterator = 0
    for i in timeCascade:
        if watch.time() > i:
            left_motor.run(primaryMoverCascadeSpeed[cascadeIterator])
            right_motor.run(secondaryMoverCascadeSpeed[cascadeIterator])
        cascadeIterator = cascadeIterator + 1
        

def TurnLeft():
    cascadeIterator = 0
    for i in timeCascade:
        if watch.time() > i:
            right_motor.run(primaryMoverCascadeSpeed[cascadeIterator])
            left_motor.run(secondaryMoverCascadeSpeed[cascadeIterator])
        cascadeIterator = cascadeIterator + 1

while True:
    color = checkColor()
    if color > 50:
        if prevColor <= 50: #hvis den lige har skiftet farve, så reset uret
            watch.reset()
        prevColor = color #farve sættes til nuværende farve for næste loop

        TurnLeft()
    else:
        if prevColor > 50: #hvis den lige har skiftet farve, så reset uret
            watch.reset()
        prevColor = color #farve sættes til nuværende farve for næste loop

        TurnRight()





            




